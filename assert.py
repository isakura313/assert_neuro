import random

# возьмем встроенную в Python библиотеку random, что мы могли задавать случаный вес нашей нейросети

inches = 40  # мы знаем что 40 дюймов равняется примерно 101, 6 сантиметрам
centimetre = 101.6


# подбор коэфицент связи. Уже по взрослому называю его весом


# создаем функцию, которая занимается подбором и принимает на вход эпохи, learning rate и  точность

def kid_neuro(epoch, lr, accur):
    W_coef = random.uniform(0, 1)  # получаем наш случайный вес связи
    print("Наш первоначальный случайный вес равен: ", W_coef)
    for i in range(epoch):  # воспользуемся циклом для прокрутки
        Error = centimetre - (inches * W_coef)
        print("Наша ошибка составляет", Error)  # будем печатать ошибку для нашей визуализации
        if Error > 0:
            W_coef += lr  # если ошибка слишком большая, мы начинаем прибавлять коэфицент

        if Error < 0:
            W_coef -= lr  # если ошибка отрицательная, тогда начинаем уменьшать коэфицент

        if Error < accur:
            print("Наш итоговый результат", W_coef)
            return  # эффектно вычисляем, сколько же сайнтиметров в одном дюйме


epoch = int(input("epoch: "))  # эпохи это у нас количество "прогонов"
lr = float(input("enter learning rate: "))  # наш шаг обучения
accur = float(input(
    "enter accurancy:  "))  # нам нужно уточнить, на какую точность мы согласны, потому что идеальной у нас скорее всего не получится

kid_neuro(epoch, lr, accur)
